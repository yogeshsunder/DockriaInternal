// <auto-generated />
using System;
using Dockria.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240124104715_iconn")]
    partial class iconn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Model.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Model.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("CompanyDomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyName");

                    b.Property<byte[]>("DocByte")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MobileNumber");

                    b.Property<int>("SignatureLimit")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Domain.Model.CompanyLogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyAdminId")
                        .HasColumnType("int");

                    b.Property<byte[]>("IconData")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("LogoData")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAdminId");

                    b.ToTable("CompanyLogos");
                });

            modelBuilder.Entity("Domain.Model.CompanyUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AspId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReadPermission")
                        .HasColumnType("bit");

                    b.Property<bool>("UploadPermission")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WritePermission")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AspId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("Domain.Model.ContainerMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContainerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContainerTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContainerTypeId");

                    b.ToTable("ContainerMetaDatas");
                });

            modelBuilder.Entity("Domain.Model.ContainerType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyAdminId")
                        .HasColumnType("int");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAdminId");

                    b.ToTable("ContainerTypes");
                });

            modelBuilder.Entity("Domain.Model.ContainerUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContainerTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContainerTypeId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("ContainerUserGroups");
                });

            modelBuilder.Entity("Domain.Model.DocumentManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AsgnDocUser")
                        .HasColumnType("bit");

                    b.Property<bool>("AuditLogDoc")
                        .HasColumnType("bit");

                    b.Property<bool>("AuditLogUser")
                        .HasColumnType("bit");

                    b.Property<bool>("DocCopy")
                        .HasColumnType("bit");

                    b.Property<bool>("DocDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("DocDown")
                        .HasColumnType("bit");

                    b.Property<bool>("DocMove")
                        .HasColumnType("bit");

                    b.Property<bool>("DocMulAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("DocPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("DocPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("DocRename")
                        .HasColumnType("bit");

                    b.Property<bool>("DocRollBack")
                        .HasColumnType("bit");

                    b.Property<bool>("DocSinAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("DocVerView")
                        .HasColumnType("bit");

                    b.Property<bool>("DownCsvRpt")
                        .HasColumnType("bit");

                    b.Property<bool>("EditMatadata")
                        .HasColumnType("bit");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("MaxDocUpNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MaxDocUpSize")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareDocExt")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareDocInt")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareSigExt")
                        .HasColumnType("bit");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("ViewDoc")
                        .HasColumnType("bit");

                    b.Property<bool>("ViewMatadata")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("DocumentManagements");
                });

            modelBuilder.Entity("Domain.Model.Documents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyAdminId")
                        .HasColumnType("int");

                    b.Property<string>("DocTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileNameTypeDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("FileNameTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("OCR")
                        .HasColumnType("bit");

                    b.Property<bool?>("VERSIONING")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAdminId");

                    b.HasIndex("FileNameTypeDocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Domain.Model.DocumentsUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DocumentsId")
                        .HasColumnType("int");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentsId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("DocumentsUserGroups");
                });

            modelBuilder.Entity("Domain.Model.EndUserManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EditEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("EditPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("EditSign")
                        .HasColumnType("bit");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("EndUserManagements");
                });

            modelBuilder.Entity("Domain.Model.FileNameMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FileNameTypeDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seperator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileNameTypeDocumentId");

                    b.ToTable("FileNameMetaDatas");
                });

            modelBuilder.Entity("Domain.Model.FileNameTypeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyAdminId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAdminId");

                    b.ToTable("FileNameTypeDocuments");
                });

            modelBuilder.Entity("Domain.Model.FolderView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyAdminId")
                        .HasColumnType("int");

                    b.Property<string>("FolderViewName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAdminId");

                    b.ToTable("FolderViews");
                });

            modelBuilder.Entity("Domain.Model.FolderViewList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FolderViewId")
                        .HasColumnType("int");

                    b.Property<string>("MetaDataList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FolderViewId");

                    b.ToTable("FolderViewLists");
                });

            modelBuilder.Entity("Domain.Model.MetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DocumentsId")
                        .HasColumnType("int");

                    b.Property<string>("MetadataName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentsId");

                    b.ToTable("MetaData");
                });

            modelBuilder.Entity("Domain.Model.MetaDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyAdminId")
                        .HasColumnType("int");

                    b.Property<string>("ContainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDataDataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDataTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAdminId");

                    b.ToTable("MetaDataTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Document Create By"
                        },
                        new
                        {
                            Id = 2,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Document Created Date"
                        },
                        new
                        {
                            Id = 3,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Document Modified By"
                        },
                        new
                        {
                            Id = 4,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Document Modified Date"
                        },
                        new
                        {
                            Id = 5,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Workflow Started By User"
                        },
                        new
                        {
                            Id = 6,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Workflow Used by Last User"
                        },
                        new
                        {
                            Id = 7,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Workflow Viewed by Last User"
                        },
                        new
                        {
                            Id = 8,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Current Date"
                        },
                        new
                        {
                            Id = 9,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Current Time"
                        },
                        new
                        {
                            Id = 10,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Current Date Time"
                        },
                        new
                        {
                            Id = 11,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Metadata Create By"
                        },
                        new
                        {
                            Id = 12,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Metadata Created Date"
                        },
                        new
                        {
                            Id = 13,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Metadata Modified By"
                        },
                        new
                        {
                            Id = 14,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Metadata Modified Date"
                        },
                        new
                        {
                            Id = 15,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Container Create By"
                        },
                        new
                        {
                            Id = 16,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Container Created Date"
                        },
                        new
                        {
                            Id = 17,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Container Modified By"
                        },
                        new
                        {
                            Id = 18,
                            MetaDataDataType = "Text",
                            MetaDataTypeName = "Container Modified Date"
                        });
                });

            modelBuilder.Entity("Domain.Model.MetaDataTypeUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MetaDataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetaDataTypeId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("MetaDataTypeUserGroups");
                });

            modelBuilder.Entity("Domain.Model.PaymentCurrency", b =>
                {
                    b.Property<int>("PaymentCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentCurrencyId"), 1L, 1);

                    b.Property<string>("PaymentCurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentCurrencyId");

                    b.ToTable("PaymentCurrencies");

                    b.HasData(
                        new
                        {
                            PaymentCurrencyId = 1,
                            PaymentCurrencyName = "Kes"
                        },
                        new
                        {
                            PaymentCurrencyId = 2,
                            PaymentCurrencyName = "USD"
                        });
                });

            modelBuilder.Entity("Domain.Model.PaymentInterval", b =>
                {
                    b.Property<int>("PaymentIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentIntervalId"), 1L, 1);

                    b.Property<string>("PaymentIntervalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentIntervalId");

                    b.ToTable("PaymentIntervals");

                    b.HasData(
                        new
                        {
                            PaymentIntervalId = 1,
                            PaymentIntervalName = "Monthly"
                        },
                        new
                        {
                            PaymentIntervalId = 2,
                            PaymentIntervalName = "Quaterly"
                        },
                        new
                        {
                            PaymentIntervalId = 3,
                            PaymentIntervalName = "Biannually"
                        },
                        new
                        {
                            PaymentIntervalId = 4,
                            PaymentIntervalName = "Annually"
                        });
                });

            modelBuilder.Entity("Domain.Model.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeId"), 1L, 1);

                    b.Property<string>("PaymentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = 1,
                            PaymentTypeName = "Renewal"
                        },
                        new
                        {
                            PaymentTypeId = 2,
                            PaymentTypeName = "One-Time"
                        });
                });

            modelBuilder.Entity("Domain.Model.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AspId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GooglePlusAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterAct")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AspId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Domain.Model.RADManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("RadEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("RadFormFill")
                        .HasColumnType("bit");

                    b.Property<bool>("RadView")
                        .HasColumnType("bit");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("RADManagements");
                });

            modelBuilder.Entity("Domain.Model.SmgInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PaymentCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentIntervalId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SmgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPercentage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCurrencyId");

                    b.HasIndex("PaymentIntervalId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("SmgInfos");
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Model.UserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupId"), 1L, 1);

                    b.Property<int>("CompanyAdminId")
                        .HasColumnType("int");

                    b.Property<string>("UserGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserGroupId");

                    b.HasIndex("CompanyAdminId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Model.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Domain.Model.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SessionToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Domain.Model.ValueInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContainerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContainerTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerTypeId");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.CompanyAdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AspId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("Date");

                    b.Property<string>("FileNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReciveEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageSpace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AspId");

                    b.ToTable("CompanyAdmin");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.CompanyViewModel", b =>
                {
                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyViewModels");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.DocumentTypeMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AspId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetadataName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAdminId");

                    b.ToTable("DocumentTypeMetadata");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.SmgCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int?>("SmgViewModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SmgViewModelId");

                    b.ToTable("SmgCosts");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.smgViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PaymentCurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentIntervalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPercentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmgViewModels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("System.Web.Mvc.SelectListGroup", b =>
                {
                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SelectListGroup");
                });

            modelBuilder.Entity("Domain.Model.CompanyLogo", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.CompanyAdminUser", "CompanyAdminUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAdminUser");
                });

            modelBuilder.Entity("Domain.Model.CompanyUsers", b =>
                {
                    b.HasOne("Domain.Model.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("AspId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Model.ContainerMetaData", b =>
                {
                    b.HasOne("Domain.Model.ContainerType", "ContainerType")
                        .WithMany("MetaDataList")
                        .HasForeignKey("ContainerTypeId");

                    b.Navigation("ContainerType");
                });

            modelBuilder.Entity("Domain.Model.ContainerType", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.CompanyAdminUser", "CompanyAdminUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId");

                    b.Navigation("CompanyAdminUser");
                });

            modelBuilder.Entity("Domain.Model.ContainerUserGroup", b =>
                {
                    b.HasOne("Domain.Model.ContainerType", "ContainerType")
                        .WithMany("UserGroupNames")
                        .HasForeignKey("ContainerTypeId");

                    b.HasOne("Domain.Model.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContainerType");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Model.DocumentManagement", b =>
                {
                    b.HasOne("Domain.Model.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Model.Documents", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.CompanyAdminUser", "CompanyAdminUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId");

                    b.HasOne("Domain.Model.FileNameTypeDocument", "FileNameTypeDocument")
                        .WithMany()
                        .HasForeignKey("FileNameTypeDocumentId");

                    b.Navigation("CompanyAdminUser");

                    b.Navigation("FileNameTypeDocument");
                });

            modelBuilder.Entity("Domain.Model.DocumentsUserGroup", b =>
                {
                    b.HasOne("Domain.Model.Documents", "Documents")
                        .WithMany("UserGroupNames")
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documents");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Model.EndUserManagement", b =>
                {
                    b.HasOne("Domain.Model.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Model.FileNameMetaData", b =>
                {
                    b.HasOne("Domain.Model.FileNameTypeDocument", "FileNameTypeDocument")
                        .WithMany("MetaDataTypeList")
                        .HasForeignKey("FileNameTypeDocumentId");

                    b.Navigation("FileNameTypeDocument");
                });

            modelBuilder.Entity("Domain.Model.FileNameTypeDocument", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.CompanyAdminUser", "CompanyAdminUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId");

                    b.Navigation("CompanyAdminUser");
                });

            modelBuilder.Entity("Domain.Model.FolderView", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.CompanyAdminUser", "CompanyAdminUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId");

                    b.Navigation("CompanyAdminUser");
                });

            modelBuilder.Entity("Domain.Model.FolderViewList", b =>
                {
                    b.HasOne("Domain.Model.FolderView", "FolderView")
                        .WithMany("RowsData")
                        .HasForeignKey("FolderViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FolderView");
                });

            modelBuilder.Entity("Domain.Model.MetaData", b =>
                {
                    b.HasOne("Domain.Model.Documents", "Documents")
                        .WithMany("MetaDataList")
                        .HasForeignKey("DocumentsId");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Domain.Model.MetaDataType", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.CompanyAdminUser", "CompanyAdminUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId");

                    b.Navigation("CompanyAdminUser");
                });

            modelBuilder.Entity("Domain.Model.MetaDataTypeUserGroup", b =>
                {
                    b.HasOne("Domain.Model.MetaDataType", "MetaDataType")
                        .WithMany("UserGroupNames")
                        .HasForeignKey("MetaDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaDataType");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Model.Profile", b =>
                {
                    b.HasOne("Domain.Model.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("AspId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Model.RADManagement", b =>
                {
                    b.HasOne("Domain.Model.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Domain.Model.SmgInfo", b =>
                {
                    b.HasOne("Domain.Model.PaymentCurrency", "PaymentCurrency")
                        .WithMany()
                        .HasForeignKey("PaymentCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.PaymentInterval", "PaymentInterval")
                        .WithMany()
                        .HasForeignKey("PaymentIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentCurrency");

                    b.Navigation("PaymentInterval");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.HasOne("Domain.Model.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Model.UserGroup", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.CompanyAdminUser", "CompanyAdminUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAdminUser");
                });

            modelBuilder.Entity("Domain.Model.ValueInfo", b =>
                {
                    b.HasOne("Domain.Model.ContainerType", "ContainerType")
                        .WithMany("Values")
                        .HasForeignKey("ContainerTypeId");

                    b.Navigation("ContainerType");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.CompanyAdminUser", b =>
                {
                    b.HasOne("Domain.Model.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("AspId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.CompanyViewModel", b =>
                {
                    b.HasOne("Domain.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.DocumentTypeMetadata", b =>
                {
                    b.HasOne("Domain.Model.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CompanyAdminId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.SmgCost", b =>
                {
                    b.HasOne("Domain.Model.ViewModel.smgViewModel", "smgViewModel")
                        .WithMany("CartItems")
                        .HasForeignKey("SmgViewModelId");

                    b.Navigation("smgViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Model.ContainerType", b =>
                {
                    b.Navigation("MetaDataList");

                    b.Navigation("UserGroupNames");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("Domain.Model.Documents", b =>
                {
                    b.Navigation("MetaDataList");

                    b.Navigation("UserGroupNames");
                });

            modelBuilder.Entity("Domain.Model.FileNameTypeDocument", b =>
                {
                    b.Navigation("MetaDataTypeList");
                });

            modelBuilder.Entity("Domain.Model.FolderView", b =>
                {
                    b.Navigation("RowsData");
                });

            modelBuilder.Entity("Domain.Model.MetaDataType", b =>
                {
                    b.Navigation("UserGroupNames");
                });

            modelBuilder.Entity("Domain.Model.ViewModel.smgViewModel", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
